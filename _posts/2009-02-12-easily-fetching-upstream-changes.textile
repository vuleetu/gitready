---
published: false
layout: post
title: easily fetching upstream changes
category: intermediate
---

This tip comes from "Dav Glass":http://blog.davglass.com/, whose work on "YUI":http://developer.yahoo.com/yui/ at "GitHub":http://github.com/yui requires him to bring in commits frequently. So, he's created a "helpful alias":http://gitready.com/intermediate/2009/02/06/helpful-command-aliases.html so he can merge in changes easily. 

First off, he's got a consistent naming scheme for his upstream remote: 

@git remote add upstream git://github.com/user/repo.git@

Just throw this in your @.gitconfig@ and you're all set:

<pre>
[alias]
  pu = !"git fetch origin -v; git fetch upstream -v; git merge upstream/master"
</pre>

Now @git pu@ will grab all of the latest changes from both remotes, and then merge in the commits from upstream. 

How is this different from just doing a @git pull upstream master@? This brings in changes from two different sources: his own fork and the main repository (the upstream). Doing a "pull":http://gitready.com/beginner/2009/01/21/pushing-and-pulling.html usually only brings changes in from one source. If you're confused about how this works, check out the History section of "Git for Computer Scientists":http://eagain.net/articles/git-for-computer-scientists/#history for some graphs on how the fetching and merging process works.

Of course, there's plenty of different ways you could tackle this problem. For example, you could use "rebase":http://gitready.com/intermediate/2009/01/31/intro-to-rebase.html or even "pull with rebase":http://gitready.com/advanced/2009/02/11/pull-with-rebase.html instead of merging. It all depends on how you want to organize your repository's history, and what's easiest for you. 

If you have aliases or suggestions to make this process easier, let us know!

